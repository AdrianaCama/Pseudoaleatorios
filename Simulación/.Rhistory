##########################################################################################
# Preparativos
##########################################################################################
# Librerías
library(ggplot2)
# Función para generar valores de una U(a,b)
random_unif <- function(n,seed=6212017,min=0,max=1,m=(2^31)-1,a=724938285,c=0){
size <- n
if(n == 1){
n <- 2*n
}
res <- rep(0, n)
res[1] <- (a*seed+c)%%m
for(i in 2:n){
res[i] <- (a*res[i-1]+c)%%m
}
res <- res/m
res <- min + res*(max-min)
res <- res[1:size]
return(res)
}
x <- c()
##########################################################################################
# Algoritmo
##########################################################################################
# 1.- Determinar n
n <- 1000
# 2.- i = 0
i <- 0
# 3.- i = i +
i <- i + 1
# 4.- ¿Es i>n? Ir a 16
while(i<=n){
# 5.- Generar una varible u1~U(0,1)
#u1 <- random_unif(n=1,seed=i)
U <- sample(random_unif(n=15*n))
u1 <- U[i]
# 6.- Generar una varible u2~U(0,1)
u2 <- U[i+5*n]
# 7.- Generar una varible u3~U(0,1)
u3 <- U[i+10*n]
#u3 <- random_unif(n=1,seed=i+1,c=1,m=2^35,a=(2^7)+1)
# Versión alternativa
# u1 <- runif(1)
# u2 <- runif(1)
# u3 <- runif(1)
# 8.- ¿Es u1 > 0.16193254? Ir a 11
if(u1 > 0.16193254){
# 11.- ¿Es u1 > 0.94285716? Ir a 14
if(u1 > 0.94285716){
# 14.- Generar 'y' como...
y <- 1 - sqrt(0.0256*(1-u2))
# 15.- ¿Se cumple la siguiente condición?
if(u3 <= (60*(y^3)*((1-y)^2)/((5.6899584)*(1-y)))){
# Entonces
x[i] <- y
i <- i + 1
# De otra manera, regresar a 5
} else {
i <- i
}
} else {
# 14.- Generar 'y' como
y <- 0.48*u2 + 0.36
# 13.- ¿Se cumple la siguiente condición?
if(u3 <= (60*(y^3)*((1-y)^2))/(2.0735)){
# Entonces
x[i] <- y
# Regresar a 3
i <- i + 1
# De otra manera, regresar a 5
} else {
i <- i
}
}
} else {
# 9.- Generar 'y' como
y <- sqrt(0.1296*u2)
# 10.- ¿Se cumple la siguiente condición?
if(u3 <= (60*(y^3)*((1-y)^2))/(3.1850496*y)){
# Entonces...
x[i] <- y
# Regresar a 3
i <- i + 1
# De otra manera, regresar a 5
} else {
i <- i
}
}
}
# Nuestra muestra
hist(x)
# Muestra generada en R
data <- rbeta(n = 1000, shape1 = 4, shape2 = 3)
hist(data)
