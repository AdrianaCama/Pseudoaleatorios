print(change_times)
print(inventory_change)
print(events)
variable1 <- inventario_promedio
variable2 <- faltante_promedio
variable3 <- costo_almacenamiento_promedio
variable4 <- costo_escases_promedio
variable5 <- costo_total_promedio
#output$I_mas <- renderText({variable1})
#output$I_menos <- renderText({variable2})
#output$costo_almacenamiento <- renderText({variable3})
#output$costo_escases <- renderText({variable4})
#output$costo_total <- renderText({variable5})
output$infobox_I_mas <- renderValueBox({
valueBox(
variable1, "Número promedio de artículos por mes en inventario", icon = icon("boxes"),
color = "teal"
)
})
output$infobox_I_menos <- renderValueBox({
valueBox(
variable2, "Número promedio de artículos retrasados por mes", icon = icon("tired"),
color = "teal"
)
})
output$infobox_costo_almacenamiento <- renderValueBox({
valueBox(
paste0("$",variable3), "Costo promedio de almacenamiento por mes", icon = icon("money"),
color = "orange"
)
})
output$infobox_costo_escases <- renderValueBox({
valueBox(
paste0("$",variable4), "Costo promedio por mes por escases", icon = icon("money"),
color = "orange"
)
})
output$infobox_costo_total <- renderValueBox({
valueBox(
paste0("$",variable5), "Costo promedio total por almacenamiento y escases", icon = icon("list"),
color = "green"
)
})
########################################################################
########################################################################
########################################################################
### GrÃ¡fica
output$distPlot <- renderPlot({
events1 <- data.frame(x = events[,1], y = events[,4])
events2 <- data.frame(x = events[,1], y = events[,5])
events3 <- data.frame(x = events[,1], y = events[,6])
ggplot() +
geom_step(data=events1, mapping=aes(x=x, y=y)) +
geom_step(data=events2, mapping=aes(x=x, y=y), linetype=3) +
geom_step(data=events3, mapping=aes(x=x, y=y), linetype=4) +
xlab("Mes") +
ylab("Nivel de inventario")
})
###
shinyjs::show(id = "distPlot")
shinyjs::show(id = "box_plot")
}
})
unif_generator <- function(size,min=0,max=1,seed=621,m=(2^31)-1,a=724938285,c=0){
res=rep(NA, size)
res[1]=(a*seed+c)%%m
for(i in 2:size){
res[i]=(a*res[i-1]+c)%%m
}
res=res/m
return(res)
}
hist(unif_generator(10000)
purchase_times <- runif(n = n, min = 0.5, max = 1)
########################################################################
########################################################################
# Tiempos de evaluaci?n de inventario
evaluation_times <- seq(from = 1, to = n)
########################################################################
demand_times_matrix <- cbind(demand_times,rep(2, each = length(demand_times)))
evaluation_times_matrix <- cbind(evaluation_times,rep(1, each = length(evaluation_times)))
events <- rbind(demand_times_matrix,evaluation_times_matrix)
events <- events[order(events[,1],decreasing=FALSE),]
events <- events[events[,1]<=n,]
temp <- rep(0, each = length(events[,1]))
events <- cbind(events, temp, temp, temp, temp)
colnames(events) <- c("Tiempo","Evento", "Cantidad","I(t)", "I(t)+", "I(t)-")
########################################################################
# Put all times in matrix?
########################################################################
########################################################################################
# Subrutina de demanda
########################################################################################
demand <- function() {
# Generar el tama?o de la demanda
temp <- runif(n = 1, min = 0, max = 1)
if (temp < (1/6)){
demand_size <- 1
} else if (temp < (1/2)){
demand_size <- 2
} else if (temp < (5/6)){
demand_size <- 3
} else {
demand_size <- 4
}
# Disminuir el nivel de inventario por el tama?o de esta demanda
inventory = inventory - demand_size
return(list("Quantity" = demand_size, "Inventory" = inventory))
}
########################################################################################
# Subrutina de llegada
########################################################################################
receive <- function() {
inventory <- inventory + restock_size
pedido_activo <- 0
restock_size <- restock_size
return(list("Quantity" = restock_size, "Inventory" = inventory))
}
###########################################################################################
# Subrutina de evaluaci?n
###########################################################################################
receive_time <- 0
evaluation <- function() {
if (inventory < s) {
# Determinar la cantidad que ser? ordenada
if (inventory > 0){
Z <- S - inventory
}
else{
Z <- S
}
# Calcular el tiempo de llegada
receive_time <- runif(n = 1, min = 0.5, max = 1)
# A?adir fila con el evento de llegada
new_row <- c(events[i,1] + receive_time, 3, Z, 0, 0, 0)
events <- rbind(events, new_row)
# Ordenar nuevamente las filas
events <- events[order(events[,1],decreasing=FALSE),]
# Considerar el costo de la orden y actualizar la estad?stica
cost_of_order <- K + ai*Z
if (pedido_activo == 1) {
Z <- 0
} else {
Z <- Z
}
pedido_activo <- 1
}
else {
Z <- 0
cost_of_order <- 0
receive_time <- 0
# Hacer nada
}
inventory <- inventory
# Estipular el pr?ximo tiempo de evaluaci?n del inventario
### Ya est? calculado
#costo_por_pedir_inventario <- costo_por_pedir_inventario + cost_of_order
return(list("Quantity" = Z, "Inventory" = inventory, "Receive_Time" = receive_time, "Events" = events))
}
############################################################################################################
############################################################################################################
############################################################################################################
################### Programa ########################
############################################################################################################
############################################################################################################
############################################################################################################
receive_times <- c()
change_times <- c()
inventory_change <- c()
length <- dim(events)[1]
i <- 1
j <- 2
while (i <= length) {
if (events[i,2] == 1){
event <- evaluation()
restock_size <- event$Quantity
events <- event$Events
} else if (events[i,2] == 2) {
event <- demand()
change_times[j] <- events[i,1]
}
else if (events[i,2] == 3) {
event <- receive()
receive_times[i] <- event$receive_time
change_times[j] <- events[i,1]
}
else {
}
inventory <- event$Inventory
# Cantidad
events[i,3] <- event$Quantity
# Inventory
events[i,4] <- event$Inventory
# Inventory +
events[i,5] <- max(inventory,0)
# Inventory -
events[i,6] <- max(-inventory,0)
if(events[i,2] == 2 || events[i,2] == 3){
inventory_change[j] <- events[i,4]
j <- j + 1
}
length <- dim(events)[1]
i <- i + 1
}
costo_almacenamiento <- 0
costo_escases <- 0
change_times[1] <- 0
inventory_change[1] <- S
change_times[length(inventory_change)+1] <- events[length(events[,1]),1]
inventory_change[length(change_times)] <- events[length(events[,1]),4]
inventario_promedio <- 0
faltante_promedio <- 0
for(j in 2:length(inventory_change)){
if(inventory_change[j-1] >= 0){
inventario_promedio <- inventario_promedio + (change_times[j]-change_times[j-1])*inventory_change[j-1]
}
if(inventory_change[j-1] < 0){
faltante_promedio <- faltante_promedio + (change_times[j]-change_times[j-1])*(-inventory_change[j-1])
}
}
inventario_promedio <- round(inventario_promedio/n,2)
faltante_promedio <- round(faltante_promedio/n,2)
costo_almacenamiento_promedio <- round(inventario_promedio * a, 2)
costo_escases_promedio <- round(faltante_promedio * e, 2)
costo_total_promedio <- costo_almacenamiento_promedio + costo_escases_promedio
print(length(inventory_change))
print(change_times)
print(inventory_change)
print(events)
variable1 <- inventario_promedio
variable2 <- faltante_promedio
variable3 <- costo_almacenamiento_promedio
variable4 <- costo_escases_promedio
variable5 <- costo_total_promedio
#output$I_mas <- renderText({variable1})
#output$I_menos <- renderText({variable2})
#output$costo_almacenamiento <- renderText({variable3})
#output$costo_escases <- renderText({variable4})
#output$costo_total <- renderText({variable5})
output$infobox_I_mas <- renderValueBox({
valueBox(
variable1, "Número promedio de artículos por mes en inventario", icon = icon("boxes"),
color = "teal"
)
})
output$infobox_I_menos <- renderValueBox({
valueBox(
variable2, "Número promedio de artículos retrasados por mes", icon = icon("tired"),
color = "teal"
)
})
output$infobox_costo_almacenamiento <- renderValueBox({
valueBox(
paste0("$",variable3), "Costo promedio de almacenamiento por mes", icon = icon("money"),
color = "orange"
)
})
output$infobox_costo_escases <- renderValueBox({
valueBox(
paste0("$",variable4), "Costo promedio por mes por escases", icon = icon("money"),
color = "orange"
)
})
output$infobox_costo_total <- renderValueBox({
valueBox(
paste0("$",variable5), "Costo promedio total por almacenamiento y escases", icon = icon("list"),
color = "green"
)
})
########################################################################
########################################################################
########################################################################
### GrÃ¡fica
output$distPlot <- renderPlot({
events1 <- data.frame(x = events[,1], y = events[,4])
events2 <- data.frame(x = events[,1], y = events[,5])
events3 <- data.frame(x = events[,1], y = events[,6])
ggplot() +
geom_step(data=events1, mapping=aes(x=x, y=y)) +
geom_step(data=events2, mapping=aes(x=x, y=y), linetype=3) +
geom_step(data=events3, mapping=aes(x=x, y=y), linetype=4) +
xlab("Mes") +
ylab("Nivel de inventario")
})
###
shinyjs::show(id = "distPlot")
shinyjs::show(id = "box_plot")
}
})
########################################################################
# Tiempo de llegada de un pedido
unif_generator <- function(size,min=0,max=1,seed=621,m=(2^31)-1,a=724938285,c=0){
res <- rep(NA, size)
res[1] <- (a*seed+c)%%m
for(i in 2:size){
res[i] <- (a*res[i-1]+c)%%m
}
res <- res/m
res <- min + res(max-min)
return(res)
}
asdfasdf<-unif_generator(10000)
########################################################################
# Tiempo de llegada de un pedido
unif_generator <- function(size,min=0,max=1,seed=621,m=(2^31)-1,a=724938285,c=0){
res <- rep(NA, size)
res[1] <- (a*seed+c)%%m
for(i in 2:size){
res[i] <- (a*res[i-1]+c)%%m
}
res <- res/m
res <- min + res*(max-min)
return(res)
}
asdfasdf<-unif_generator(10000)
hist(asdfasdf)
purchase_times <- unif_generator(n = n, min = 0.5, max = 1)
########################################################################
# Tiempo de llegada de un pedido
unif_generator <- function(n,min=0,max=1,seed=621,m=(2^31)-1,a=724938285,c=0){
res <- rep(NA, n)
res[1] <- (a*seed+c)%%m
for(i in 2:n){
res[i] <- (a*res[i-1]+c)%%m
}
res <- res/m
res <- min + res*(max-min)
return(res)
}
n<-12312
purchase_times <- unif_generator(n = n, min = 0.5, max = 1)
hist(purchase_times)
exp_generator <- function(n,rate=1){
res <- unif_generator(n)
mean <- 1/rate
res <- (-1)*(mean)*log(res)
return(res)
}
exp_generator(124321234)
exp_generator(12343)
hist(exp_generator(12343))
hist(exp_generator(12343))
asdf<-exp_generator(12343)
hist(asdf)
mean(asdf)
runApp('simulacion.R')
########################################################################
# Tiempo de llegada de un pedido
unif_generator <- function(n,min=0,max=1,seed=621,m=(2^31)-1,a=724938285,c=0){
res <- rep(NA, n)
res[1] <- (a*seed+c)%%m
for(i in 2:n){
res[i] <- (a*res[i-1]+c)%%m
}
res <- res/m
res <- min + res*(max-min)
return(res)
}
unif_generator(123)
runApp('simulacion.R')
runApp('simulacion.R')
library(shiny)
library(shinydashboard)
library(shinyjs)
library(ggplot2)
library(ggfortify)
unif_generator <- function(n,min=0,max=1,seed=621,m=(2^31)-1,a=724938285,c=0){
size <- n
if(n == 1){
n <- 621*n
}
res <- rep(0, n)
res[1] <- (a*seed+c)%%m
for(i in 2:n){
res[i] <- (a*res[i-1]+c)%%m
}
res <- res/m
res <- min + res*(max-min)
res <- res[1:size]
return(res)
}
numeros <- unif_generator(10000)
numeros <- unif_generator(10000)
library(ggplot2)
# Establecer el tamaño de k. Mandar aviso al usuario si establece una k muy grande.
k <- 5
# Checar si el número de datos a verificar independencia es par
if(length(numeros)%%2 == 1){
# Si no es par, generar una observación más a num y agregarla
# PENDIENTE: Checar si está bien quitar una observación.
num_2 <- numeros[-1]
} else {
num_2 <- numeros
}
n <- length(numeros)
# Obtener parámetros
numeros <- unif_generator(10000)
n <- length(numeros)
# Número de atrasos
atrasos <- 3
h <- floor((n-1)/atrasos)-1
h
numeros[seq(from = 1, to = n, by = atrasos)]
seq(from = 1, to = n, by = atrasos)
numeros
# Formar vectores para el estimador considerando el número de atrasos
temp <- numeros[seq(from = 1, to = n, by = atrasos)]
lag <- temp[-1]
normal <- temp[-length(temp)]
length(lag)
h
length(normal)
length(lag)
lag <- lag[1:h]
normal <- normal[1:h]
p_hat <-  ((12/(h+1)) * (sum(lag*normal))) - 3
variance <- (13*h+7)/((h+1)^(2))
A <- p_hat/sqrt(variance)
Y <- A
z <- qnorm(1-(alfa/2))
quantile_CorrelationTest <- z
p_value <- 2*pnorm(0.8641, lower.tail = FALSE)
quantile_CorrelationTest
A
p_value
alfa
runApp('Generador.R')
runApp('Generador.R')
# Obtener parámetros
numeros <- unif_generator(10000)
# Obtener parámetros
numeros <- unif_generator(10000)
n<-3
# Número de atrasos
atrasos <- 3
# Número de atrasos
atrasos <- 3
floor((n-1)/atrasos)-1
h <- floor((n-1)/atrasos)-1
h
n <-4
# Número de atrasos
atrasos <- 3
h <- floor((n-1)/atrasos)-1
h
n <-5
# Número de atrasos
atrasos <- 3
h <- floor((n-1)/atrasos)-1
n <-6
# Número de atrasos
atrasos <- 3
h <- floor((n-1)/atrasos)-1
h
n <-7
# Número de atrasos
atrasos <- 3
h <- floor((n-1)/atrasos)-1
runApp('Generador.R')
runApp('Generador.R')
runApp('Generador.R')
runApp('Generador.R')
runApp('Generador.R')
runApp('Generador.R')
runApp('Generador.R')
runApp('Generador.R')
runApp('Generador.R')
runApp('Generador.R')
runApp('Generador.R')
runApp('Generador.R')
runApp('Generador.R')
runApp('Generador.R')
runApp('Generador.R')
runApp('Generador.R')
runApp('Generador.R')
runApp('Generador.R')
runApp('Generador.R')
runApp('Generador.R')
# Preparativos
random_unif <- function(n,min=0,max=1,seed=621,m=(2^31)-1,a=724938285,c=0){
size <- n
if(n == 1){
n <- 2*n
}
res <- rep(0, n)
res[1] <- (a*seed+c)%%m
for(i in 2:n){
res[i] <- (a*res[i-1]+c)%%m
}
res <- res/m
res <- min + res*(max-min)
res <- res[1:size]
return(res)
}
random_unif(2)
# Preparativos
random_unif <- function(n,min=0,max=1,seed=621,m=(2^31)-1,a=724938285,c=0){
size <- n
if(n == 1){
n <- 2*n
}
res <- rep(0, n)
res[1] <- (a*seed+c)%%m
for(i in 2:n){
res[i] <- (a*res[i-1]+c)%%m
}
res <- res/m
res <- min + res*(max-min)
res <- res[1:size]
return(res)
}
random_unif(2)
